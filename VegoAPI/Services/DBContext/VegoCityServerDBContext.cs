// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using VegoAPI.VegoAPI.Models.DBEntities;

namespace VegoAPI.VegoAPI.Services.DBContext
{
    public partial class VegoCityServerDBContext : DbContext
    {
        public VegoCityServerDBContext()
        {
        }

        public VegoCityServerDBContext(DbContextOptions<VegoCityServerDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DeliveryType> DeliveryTypes { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductMainPhoto> ProductMainPhotos { get; set; }
        public virtual DbSet<ProductPhoto> ProductPhotos { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<ProductsToOrder> ProductsToOrders { get; set; }
        public virtual DbSet<PromoCode> PromoCodes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DeliveryType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.DeliveryTypeId).HasColumnName("DeliveryTypeID");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PromoCodeId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("PromoCodeID");

                entity.HasOne(d => d.DeliveryType)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.DeliveryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_DeliveryTypes");

                entity.HasOne(d => d.PromoCode)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PromoCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Orders");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductTypes");
            });

            modelBuilder.Entity<ProductMainPhoto>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Table_1");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProductID");

                entity.Property(e => e.PhotoId).HasColumnName("PhotoID");

                entity.HasOne(d => d.Photo)
                    .WithMany(p => p.ProductMainPhotos)
                    .HasForeignKey(d => d.PhotoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Table_1_ProductPhotos");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.ProductMainPhoto)
                    .HasForeignKey<ProductMainPhoto>(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Table_1_Products");
            });

            modelBuilder.Entity<ProductPhoto>(entity =>
            {
                entity.HasKey(e => e.Guid);

                entity.Property(e => e.Guid)
                    .ValueGeneratedNever()
                    .HasColumnName("GUID");

                entity.Property(e => e.HighResPhotoPath).IsRequired();

                entity.Property(e => e.LowResPhotoPath).IsRequired();

                entity.HasMany(d => d.Products)
                    .WithMany(p => p.Photos)
                    .UsingEntity<Dictionary<string, object>>(
                        "PhotoToProduct",
                        l => l.HasOne<Product>().WithMany().HasForeignKey("ProductId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PhotoToProduct_Products"),
                        r => r.HasOne<ProductPhoto>().WithMany().HasForeignKey("PhotoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PhotoToProduct_ProductPhotos"),
                        j =>
                        {
                            j.HasKey("PhotoId", "ProductId");

                            j.ToTable("PhotoToProduct");

                            j.IndexerProperty<Guid>("PhotoId").HasColumnName("PhotoID");

                            j.IndexerProperty<int>("ProductId").HasColumnName("ProductID");
                        });
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ProductsToOrder>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId });

                entity.ToTable("ProductsToOrder");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ProductsToOrders)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductsToOrder_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductsToOrders)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductsToOrder_Products");
            });

            modelBuilder.Entity<PromoCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}